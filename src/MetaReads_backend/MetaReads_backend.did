type Author = record {
  id : principal;
  name : text;
  books : vec record {
    id : principal;
    title : text;
    updated_at : opt nat64;
    book_url : text;
    views : int64;
    cover_image : text;
    plan : text;
    description : text;
    created_at : nat64;
    author : Author;
    genre : record { id : principal; name : text; books : Vec };
    page_count : int64;
  };
};
type AuthorPayload = record { id : opt principal; name : text };
type Book = record {
  id : principal;
  title : text;
  updated_at : opt nat64;
  book_url : text;
  views : int64;
  cover_image : text;
  plan : text;
  description : text;
  created_at : nat64;
  author : Author;
  genre : Genre;
  page_count : int64;
};
type BookPayload = record {
  id : opt principal;
  title : text;
  book_url : text;
  cover_image : text;
  plan : text;
  genre_id : principal;
  description : text;
  author_id : principal;
  page_count : int64;
};
type Error = variant {
  NotFound : record { message : text };
  ValidationErrors : record { errors : text };
  NotAuthorized : record { message : text };
  PaymentProcessingError : record { message : text };
};
type Genre = record { id : principal; name : text; books : Vec };
type GenrePayload = record { id : opt principal; name : text };
type Library = record { id : principal; book : Book; user : User };
type LibraryPayload = record {
  id : opt principal;
  user_id : principal;
  book_id : principal;
};
type PaginatedBooks = record { books : vec Book; total_count : nat64 };
type Plan = record {
  id : principal;
  price_per_year : nat64;
  name : text;
  price_per_month : nat64;
};
type PlanPayload = record {
  id : opt principal;
  price_per_year : nat64;
  name : text;
  price_per_month : nat64;
};
type Result = variant { Ok : Author; Err : Error };
type Result_1 = variant { Ok : Book; Err : Error };
type Result_2 = variant { Ok : Genre; Err : Error };
type Result_3 = variant { Ok : Library; Err : Error };
type Result_4 = variant { Ok : Plan; Err : Error };
type Result_5 = variant { Ok : Subscription; Err : Error };
type Result_6 = variant { Ok : User; Err : Error };
type Result_7 = variant { Ok : PaginatedBooks; Err : Error };
type Subscription = record {
  id : principal;
  plan : Plan;
  user_id : principal;
  subscription_end_date : nat64;
  subscription_start_date : nat64;
};
type SubscriptionPayload = record {
  id : opt principal;
  user_id : principal;
  plan_id : principal;
  frequency : text;
};
type User = record {
  id : principal;
  money : nat64;
  username : text;
  subscription : opt Subscription;
  password : text;
  image : text;
};
type UserPayload = record {
  id : principal;
  money : opt nat64;
  username : text;
  password : opt text;
  image : opt text;
};
type Vec = vec record {
  id : principal;
  title : text;
  updated_at : opt nat64;
  book_url : text;
  views : int64;
  cover_image : text;
  plan : text;
  description : text;
  created_at : nat64;
  author : Author;
  genre : record { id : principal; name : text; books : Vec };
  page_count : int64;
};
service : () -> {
  create_author : (AuthorPayload) -> (Result);
  create_book : (BookPayload) -> (Result_1);
  create_genre : (GenrePayload) -> (Result_2);
  create_library : (LibraryPayload) -> (Result_3);
  create_plan : (PlanPayload) -> (Result_4);
  create_subscription : (SubscriptionPayload) -> (Result_5);
  create_user : (UserPayload) -> (Result_6);
  delete_author : (principal) -> (Result);
  delete_book : (principal) -> (Result_1);
  delete_genre : (principal) -> (Result_2);
  delete_library : (principal) -> (Result_3);
  get_all_author : () -> (vec Author) query;
  get_all_book : (nat64, nat64, opt text) -> (Result_7) query;
  get_all_genre : () -> (vec Genre) query;
  get_all_plan : () -> (vec Plan) query;
  get_all_subscription : () -> (vec Subscription) query;
  get_all_user : () -> (vec User) query;
  get_book : (principal) -> (Result_1) query;
  get_book_by_genre : (principal) -> (vec Book) query;
  get_latest_release_book : () -> (vec Book) query;
  get_library_by_user : (principal) -> (vec Library) query;
  get_popular_book : () -> (vec Book) query;
  get_subscription_by_user : (principal) -> (opt Subscription) query;
  get_user : (principal) -> (Result_6) query;
  login : (text, text) -> (Result_6) query;
  search_book : (text) -> (vec Book) query;
  update_author : (GenrePayload) -> (Result);
  update_book : (BookPayload) -> (Result_1);
  update_genre : (GenrePayload) -> (Result_2);
  update_plan : (PlanPayload) -> (Result_4);
  update_user : (UserPayload) -> (Result_6);
}
