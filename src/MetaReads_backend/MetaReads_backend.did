type Author = record { id : principal; name : text };
type AuthorPayload = record { id : opt principal; name : text };
type AuthorResponse = record { author : Author; message : text };
type Book = record {
  id : principal;
  title : text;
  updated_at : opt nat64;
  views : nat64;
  cover_image : text;
  plan : text;
  genre_id : principal;
  description : text;
  created_at : nat64;
  author_id : principal;
  page_count : nat64;
};
type BookPayload = record {
  id : opt principal;
  title : text;
  cover_image : text;
  plan : text;
  genre_id : principal;
  description : text;
  author_id : principal;
  page_count : nat64;
};
type BookResponse = record { book : Book; message : text };
type Error = variant {
  NotFound : record { message : text };
  ValidationErrors : record { errors : text };
  NotAuthorized : record { message : text };
};
type Genre = record { id : principal; name : text };
type GenrePayload = record { id : opt principal; name : text };
type GenreResponse = record { genre : Genre; message : text };
type Library = record { id : principal; book : Book; user : User };
type LibraryPayload = record {
  id : opt principal;
  user_id : principal;
  book_id : principal;
};
type LibraryResponse = record { library : Library; message : text };
type Result = variant { Ok : AuthorResponse; Err : Error };
type Result_1 = variant { Ok : BookResponse; Err : Error };
type Result_2 = variant { Ok : GenreResponse; Err : Error };
type Result_3 = variant { Ok : LibraryResponse; Err : Error };
type Result_4 = variant { Ok : UserResponse; Err : Error };
type Result_5 = variant { Ok : Genre; Err : Error };
type Result_6 = variant { Ok : Book; Err : Error };
type Result_7 = variant { Ok : Genre; Err : Error };
type Result_8 = variant { Ok : Library; Err : Error };
type Result_9 = variant { Ok : User; Err : Error };
type User = record {
  id : principal;
  money : nat64;
  username : text;
  password : text;
  image : text;
};
type UserPayload = record {
  money : opt nat64;
  username : text;
  password : text;
  image : text;
};
type UserResponse = record { user : User; message : text };
service : () -> {
  create_author : (AuthorPayload) -> (Result);
  create_book : (BookPayload) -> (Result_1);
  create_genre : (GenrePayload) -> (Result_2);
  create_library : (LibraryPayload) -> (Result_3);
  create_user : (UserPayload) -> (Result_4);
  delete_author : (principal) -> (Result_5);
  delete_book : (principal) -> (Result_6);
  delete_genre : (principal) -> (Result_7);
  delete_library : (principal) -> (Result_8);
  get_all_author : () -> (vec Genre) query;
  get_all_book : () -> (vec Book) query;
  get_all_genre : () -> (vec Genre) query;
  get_all_user : () -> (vec User) query;
  get_book : (principal) -> (Result_6) query;
  get_latest_release_book : () -> (vec Book) query;
  get_library_by_user : (principal) -> (vec Library) query;
  get_popular_book : () -> (vec Book) query;
  get_user : (principal) -> (Result_9) query;
  login : (text, text) -> (Result_9) query;
  update_author : (GenrePayload) -> (Result_7);
  update_book : (BookPayload) -> (Result_6);
  update_genre : (GenrePayload) -> (Result_7);
}
